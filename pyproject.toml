[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python-env-manager"
version = "1.0.0"
description = "A powerful, cross-platform tool for managing Python virtual environments with a clean, intuitive API."
readme = "README.md"
authors = [
    {name = "r4d4m4n71s"}
]
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
requires-python = ">=3.7"
dependencies = [
    "rich>=10.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=4.0",
    "coverage>=7.0",
    "black",
    "isort",
    "mypy",
]

[project.urls]
"Homepage" = "https://github.com/r4d4m4n71s/Python-env_manager"
"Bug Tracker" = "https://github.com/r4d4m4n71s/Python-env_manager/issues"
"Documentation" = "https://github.com/r4d4m4n71s/Python-env_manager/blob/main/README.md"

[tool.setuptools]
packages = ["env_manager", "env_manager.runners"]

[tool.setuptools.package-data]
env_manager = ["py.typed"]

[tool.black]
line-length = 88
target-version = ["py37", "py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov=env_manager --cov-report=term-missing"
testpaths = ["tests"]

[tool.coverage.run]
source = ["env_manager"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.bumpversion]
current_version = "1.0.0"
commit = true
tag = true